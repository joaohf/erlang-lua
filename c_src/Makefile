# Based on c_src.mk from erlang.mk by Loic Hoguin <essen@ninenines.eu>

CURDIR := $(shell pwd)
BASEDIR := $(abspath $(CURDIR)/..)

CFLAGS += -fPIC -D_REENTRANT=PTHREADS
CXXFLAGS += -fPIC

PKG_CONFIG_LUA= $(shell pkg-config --exists lua; echo $$?)
PKG_CONFIG_ERL_EI = $(shell pkg-config --exists erl_ei; echo $$?)
PKG_CONFIG_ERL_ERTS = $(shell pkg-config --exists erl_erts; echo $$?)

ifeq ($(PKG_CONFIG_LUA), 0)
LUA_INCLUDE_DIR = $(shell pkg-config --cflags lua)
LUA_LIB_DIR = $(shell pkg-config --libs lua)

CFLAGS += $(LUA_INCLUDE_DIR)
CXXFLAGS += $(LUA_INCLUDE_DIR)
LDLIBS += $(LUA_LIB_DIR)
else
$(error Can not find lua libraries)
endif

ifeq ($(PKG_CONFIG_ERL_EI), 0)
ERL_INTERFACE_INCLUDE_DIR = $(shell pkg-config --cflags erl_ei)
ERL_INTERFACE_LIB_DIR = $(shell pkg-config --libs erl_ei)

CFLAGS += $(ERL_INTERFACE_INCLUDE_DIR)
CXXFLAGS += $(ERL_INTERFACE_INCLUDE_DIR)
LDLIBS += $(ERL_INTERFACE_LIB_DIR)
else
ERL_INTERFACE_INCLUDE_DIR = $(shell erl -noshell -s init stop -eval "io:format(\"~ts\", [code:lib_dir(erl_interface, include)]).")
ERL_INTERFACE_LIB_DIR = $(shell erl -noshell -s init stop -eval "io:format(\"~ts\", [code:lib_dir(erl_interface, lib)]).")

CFLAGS += -I $(ERL_INTERFACE_INCLUDE_DIR)
CXXFLAGS += -I $(ERL_INTERFACE_INCLUDE_DIR)
LDLIBS += -L $(ERL_INTERFACE_LIB_DIR) -lei
endif

ifeq ($(PKG_CONFIG_ERL_ERTS), 0)
ERTS_INCLUDE_DIR = $(shell pkg-config --cflags erl_erts)

CFLAGS += $(ERTS_INCLUDE_DIR)
CXXFLAGS += $(ERTS_INCLUDE_DIR)
else
ERTS_INCLUDE_DIR = $(shell erl -noshell -s init stop -eval "io:format(\"~ts/erts-~ts/include/\", [code:root_dir(), erlang:system_info(version)]).")

CFLAGS += -I $(ERTS_INCLUDE_DIR)
CXXFLAGS += -I $(ERTS_INCLUDE_DIR)
endif

C_SRC_DIR = $(CURDIR)
C_SRC_OUTPUT ?= $(CURDIR)/../priv/lua_enode

# System type and C compiler/flags.

UNAME_SYS := $(shell uname -s)
ifeq ($(UNAME_SYS), Darwin)
	CC ?= cc
	CFLAGS ?= -O3 -std=c99 -arch x86_64 -finline-functions -Wall -Wmissing-prototypes
	CXXFLAGS ?= -O3 -arch x86_64 -finline-functions -Wall
	LDFLAGS ?= -arch x86_64 -flat_namespace -undefined suppress
else ifeq ($(UNAME_SYS), FreeBSD)
	CC ?= cc
	CFLAGS ?= -O3 -std=c99 -finline-functions -Wall -Wmissing-prototypes
	CXXFLAGS ?= -O3 -finline-functions -Wall
else ifeq ($(UNAME_SYS), Linux)
	CC ?= gcc
	CFLAGS ?= -O3 -std=c99 -finline-functions -Wall -Wmissing-prototypes
	CXXFLAGS ?= -O3 -finline-functions -Wall
endif

#CFLAGS += -fPIC $(ERTS_INCLUDE_DIR) $(ERL_INTERFACE_INCLUDE_DIR)
#CXXFLAGS += -fPIC -I $(ERTS_INCLUDE_DIR) -I $(ERL_INTERFACE_INCLUDE_DIR)

#LDLIBS += $(ERL_INTERFACE_LIB_DIR)
#LDFLAGS += -shared

# Verbosity.

c_verbose_0 = @echo " C     " $(?F);
c_verbose = $(c_verbose_$(V))

cpp_verbose_0 = @echo " CPP   " $(?F);
cpp_verbose = $(cpp_verbose_$(V))

link_verbose_0 = @echo " LD    " $(@F);
link_verbose = $(link_verbose_$(V))

SOURCES := lua_enode.c

OBJECTS = $(addsuffix .o, $(basename $(SOURCES)))

COMPILE_C = $(c_verbose) $(CC) $(CFLAGS) $(CPPFLAGS) -c
COMPILE_CPP = $(cpp_verbose) $(CXX) $(CXXFLAGS) $(CPPFLAGS) -c

all: $(C_SRC_OUTPUT)

$(C_SRC_OUTPUT): $(OBJECTS)
	@mkdir -p $(BASEDIR)/priv/
	$(link_verbose) $(CC) $(OBJECTS) $(LDFLAGS) $(LDLIBS) -o $(C_SRC_OUTPUT)

%.o: %.c
	$(COMPILE_C) $(OUTPUT_OPTION) $<

%.o: %.cc
	$(COMPILE_CPP) $(OUTPUT_OPTION) $<

%.o: %.C
	$(COMPILE_CPP) $(OUTPUT_OPTION) $<

%.o: %.cpp
	$(COMPILE_CPP) $(OUTPUT_OPTION) $<

clean:
	@rm -f $(C_SRC_OUTPUT) $(OBJECTS)
